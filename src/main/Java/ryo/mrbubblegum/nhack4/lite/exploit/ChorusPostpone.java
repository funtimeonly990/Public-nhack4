package ryo.mrbubblegum.nhack4.lite.exploit;

import net.minecraft.init.Items;
import net.minecraft.item.ItemChorusFruit;
import net.minecraft.network.play.client.CPacketConfirmTeleport;
import net.minecraft.network.play.client.CPacketPlayer;
import net.minecraft.util.math.BlockPos;
import net.minecraftforge.event.entity.living.LivingEntityUseItemEvent;
import net.minecraftforge.fml.common.eventhandler.SubscribeEvent;
import ryo.mrbubblegum.nhack4.lite.Module;
import ryo.mrbubblegum.nhack4.world.events.PacketEvent;
import ryo.mrbubblegum.nhack4.world.events.UpdateWalkingPlayerEvent;

import java.util.LinkedList;
import java.util.Queue;

public class ChorusPostpone
        extends Module {
    boolean ateChorus = false;
    boolean hackPacket = false;
    boolean posTp = false;
    double posX;
    double posY;
    double posZ;
    Queue<CPacketPlayer> packets = new LinkedList<CPacketPlayer>();
    Queue<CPacketConfirmTeleport> packetss = new LinkedList<CPacketConfirmTeleport>();

    public ChorusPostpone() {
        super("ChorusPostpone", "hold the chorus packet", Module.Category.EXPLOIT, true, false, false);
    }

    @Override
    public void onEnable() {
        this.ateChorus = false;
        this.hackPacket = false;
        this.posTp = false;
    }

    @Override
    public void onUpdate() {
        if (this.ateChorus && !ChorusPostpone.mc.player.getPosition().equals(new BlockPos(this.posX, this.posY, this.posZ)) && !this.posTp && ChorusPostpone.mc.player.getDistance(this.posX, this.posY, this.posZ) > 1.0) {
            ChorusPostpone.mc.player.setPosition(this.posX, this.posY, this.posZ);
            this.posTp = true;
        }
        if (this.ateChorus && ChorusPostpone.mc.player != null && ChorusPostpone.mc.player.getHeldItemMainhand().getItem() instanceof ItemChorusFruit && ChorusPostpone.mc.player.isHandActive()) {
            this.ateChorus = false;
            this.hackPacket = true;
            this.sendPackets();
        }
    }

    public void sendPackets() {
        while (!this.packets.isEmpty()) {
            ChorusPostpone.mc.player.connection.sendPacket(this.packets.poll());
        }
        while (!this.packetss.isEmpty()) {
            ChorusPostpone.mc.player.connection.sendPacket(this.packetss.poll());
        }
        this.hackPacket = false;
        this.ateChorus = false;
    }

    @SubscribeEvent
    public void Event(UpdateWalkingPlayerEvent eventPlayerTravel) {
    }

    @SubscribeEvent
    public void finishEating(LivingEntityUseItemEvent.Finish event) {
        if (event.getEntity() == ChorusPostpone.mc.player && event.getResultStack().getItem().equals(Items.CHORUS_FRUIT)) {
            this.posX = ChorusPostpone.mc.player.posX;
            this.posY = ChorusPostpone.mc.player.posY;
            this.posZ = ChorusPostpone.mc.player.posZ;
            this.posTp = false;
            this.ateChorus = true;
        }
    }

    @SubscribeEvent
    public void onUpdate(PacketEvent.Send event) {
        if (event.getPacket() instanceof CPacketConfirmTeleport && this.ateChorus) {
            this.packetss.add(event.getPacket());
            event.setCanceled(true);
        }
        if (event.getPacket() instanceof CPacketPlayer && this.ateChorus) {
            this.packets.add(event.getPacket());
            event.setCanceled(true);
        }
    }
}