package ryo.mrbubblegum.nhack4.lite.exploit;

import net.minecraft.entity.Entity;
import net.minecraft.entity.item.EntityEnderPearl;
import net.minecraft.network.play.client.CPacketPlayer;
import net.minecraft.network.play.server.SPacketSpawnObject;
import net.minecraftforge.fml.common.eventhandler.SubscribeEvent;
import ryo.mrbubblegum.nhack4.impl.util.Util;
import ryo.mrbubblegum.nhack4.lite.Module;
import ryo.mrbubblegum.nhack4.system.setting.Setting;
import ryo.mrbubblegum.nhack4.world.events.PacketEvent;

import java.util.Comparator;
import java.util.Queue;
import java.util.concurrent.ConcurrentLinkedQueue;

public class PearlBait
        extends Module {
    public final Setting<Boolean> guarantee = this.register(new Setting<Boolean>("Guarantee", true));
    private final Queue<CPacketPlayer> packets = new ConcurrentLinkedQueue<>();
    private int thrownPearlId = -1;

    public PearlBait() {
        super("FakePearl", "gud bait", Module.Category.EXPLOIT, true, false, false);
    }

    @SubscribeEvent
    public void onPacketReceive(PacketEvent.Receive event) {
        if (event.getPacket() instanceof SPacketSpawnObject) {
            SPacketSpawnObject packet = event.getPacket();
            if (packet.getType() == 65) {
                Util.mc.world.playerEntities.stream()
                        .min(Comparator.comparingDouble((p) -> p.getDistance(packet.getX(), packet.getY(), packet.getZ())))
                        .ifPresent((player) -> {
                            if (player.equals(Util.mc.player)) {
                                if (!Util.mc.player.onGround) {
                                    return;
                                }

                                // do not allow movement
                                Util.mc.player.motionX = 0.0;
                                Util.mc.player.motionY = 0.0;
                                Util.mc.player.motionZ = 0.0;

                                Util.mc.player.movementInput.moveForward = 0.0f;
                                Util.mc.player.movementInput.moveStrafe = 0.0f;

                                // send rubberband packet
                                Util.mc.player.connection.sendPacket(new CPacketPlayer.Position(Util.mc.player.posX, Util.mc.player.posY + 1.0, Util.mc.player.posZ, false));

                                thrownPearlId = packet.getEntityID();
                            }
                        });
            }
        }
    }

    @SubscribeEvent
    public void onPacketSend(PacketEvent.Send event) {
        if (event.getPacket() instanceof CPacketPlayer && guarantee.getValue() && thrownPearlId != -1) {
            packets.add(event.getPacket());
            event.setCanceled(true);
        }
    }

    @Override
    public void onUpdate() {
        if (thrownPearlId != -1) {
            for (Entity entity : Util.mc.world.loadedEntityList) {
                if (entity.getEntityId() == thrownPearlId && entity instanceof EntityEnderPearl) {
                    EntityEnderPearl pearl = (EntityEnderPearl) entity;
                    if (pearl.isDead) {
                        thrownPearlId = -1;
                    }
                }
            }
        } else {
            if (!packets.isEmpty()) {
                do {
                    Util.mc.player.connection.sendPacket(packets.poll());
                } while (!packets.isEmpty());
            }
        }
    }
}